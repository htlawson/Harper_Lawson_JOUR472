mutate(year = str_replace(year, "x", "")) %>%
spread(key = "crime_type", value = "count") %>%
clean_names()
# To create a graph:
updated_general_crime_lb %>%
select(year, violent_crime, property_crime) %>%
pivot_longer(cols = c(violent_crime, property_crime), names_to = "crime_type", values_to = "Total") %>%
ggplot(aes(x = year, y = Total, fill = crime_type)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
scale_fill_manual(values = c("#B0ABFF", "#0C27D0"), labels = c("Property Crime", "Violent Crime")) +
scale_y_continuous(limits = c(0, 2500)) +
labs(x = "Year", y = "Number Reported",
title = "Crime Totals from 2012 to 2023", fill = NULL) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# To determine Lynchburg's violent crime rate and find the trend:
lb_pop <- lb_pop %>%
mutate(year = as.character(year))
v_crime_rate_lb <- updated_general_crime_lb %>%
right_join(lb_pop, by = c("year")) %>%
select(year, population, violent_crime) %>%
filter(year >= "2012" & year <= "2023") %>%
mutate(rate = as.numeric(round(violent_crime/population) * 100000), 1)
v_crime_rate_lb <- v_crime_rate_lb %>%
mutate(population = as.numeric(population))
# To display the results:
v_crime_rate_lb %>%
select(year, rate) %>%
print()
v_crime_dif_lb <- (((v_crime_rate_lb$rate[12]-v_crime_rate_lb$rate[1])/v_crime_rate_lb$rate[1]) * 100)
cat("Percent change in Lynchburg's violent crime rate from 2012 to 2023:", v_crime_dif_lb, "%\n")
# To determine Lynchburg's violent crime rate and find the trend:
lb_pop <- lb_pop %>%
mutate(year = as.character(year))
v_crime_rate_lb <- updated_general_crime_lb %>%
right_join(lb_pop, by = c("year")) %>%
select(year, population, violent_crime) %>%
filter(year >= "2012" & year <= "2023") %>%
mutate(rate = round((violent_crime / population) * 100000, 1))
v_crime_rate_lb <- v_crime_rate_lb %>%
mutate(population = as.numeric(population))
# To display the results:
v_crime_rate_lb %>%
select(year, rate) %>%
print()
v_crime_dif_lb <- (((v_crime_rate_lb$rate[12]-v_crime_rate_lb$rate[1])/v_crime_rate_lb$rate[1]) * 100)
cat("Percent change in Lynchburg's violent crime rate from 2012 to 2023:", v_crime_dif_lb, "%\n")
# To determine Lynchburg's violent crime rate and find the trend:
lb_pop <- lb_pop %>%
mutate(year = as.character(year))
v_crime_rate_lb <- updated_general_crime_lb %>%
right_join(lb_pop, by = c("year")) %>%
select(year, population, violent_crime) %>%
filter(year >= "2012" & year <= "2023") %>%
mutate(rate = round((violent_crime / population) * 100000, 1))
v_crime_rate_lb <- v_crime_rate_lb %>%
mutate(population = as.numeric(population))
# To display the results:
v_crime_rate_lb %>%
select(year, rate) %>%
print()
v_crime_dif_lb <- (((v_crime_rate_lb$rate[12]-v_crime_rate_lb$rate[1])/v_crime_rate_lb$rate[1]) * 100)
cat("Percent change in Lynchburg's violent crime rate from 2012 to 2023:", v_crime_dif_lb, "%\n")
# To determine Lynchburg's violent crime rate and find the trend:
lb_pop <- lb_pop %>%
mutate(year = as.character(year))
v_crime_rate_lb <- updated_general_crime_lb %>%
right_join(lb_pop, by = c("year")) %>%
select(year, population, violent_crime) %>%
filter(year >= "2012" & year <= "2023") %>%
mutate(rate = round((violent_crime / population) * 100000, 1))
v_crime_rate_lb <- v_crime_rate_lb %>%
mutate(population = as.numeric(population))
# To display the results:
v_crime_rate_lb %>%
select(year, rate) %>%
print()
v_crime_dif_lb <- round(((v_crime_rate_lb$rate[12] - v_crime_rate_lb$rate[1]) / v_crime_rate_lb$rate[1]) * 100, 1)
cat("Percent change in Lynchburg's violent crime rate from 2012 to 2023:", v_crime_dif_lb, "%\n")
# To add a Total row to the Lynchburg crime type data frame:
total_row <- colSums(crime_type_lb[, -1], na.rm = TRUE)
total_row <- as.numeric(total_row)
crime_type_lb <- rbind(crime_type_lb, c("Total", total_row))
# To find the total crime rate per 1,000 people:
updated_crime_type_lb <- crime_type_lb %>%
select(x2012, x2013, x2014, x2015, x2016, x2017, x2018, x2019, x2020, x2021, x2022, x2023) %>%
slice(as.numeric(46)) %>%
gather(year, total_crime) %>%
mutate(year = str_replace(year, "x", ""),
total_crime = as.numeric(total_crime))
total_crime_rate_lb <- v_crime_rate_lb %>%
right_join(updated_crime_type_lb, by = c("year")) %>%
select(year, population, total_crime) %>%
filter(year >= "2012" & year <= "2023") %>%
mutate(crimes_per_1000 = round((total_crime / population) * 1000, 1))
# To display the results:
total_crime_rate_lb %>%
arrange(desc(crimes_per_1000)) %>%
print()
# To add a Total row to the Lynchburg crime type data frame:
total_row <- colSums(crime_type_lb[, -1], na.rm = TRUE)
# To refresh the data:
crime_type_lb <- read_csv("data/crime_type_lynchburg.csv") %>%
clean_names() %>%
rename("crime_type" = x1)
# To add a Total row to the Lynchburg crime type data frame:
total_row <- colSums(crime_type_lb[, -1], na.rm = TRUE)
total_row <- as.numeric(total_row)
crime_type_lb <- rbind(crime_type_lb, c("Total", total_row))
# To find the total crime rate per 1,000 people:
updated_crime_type_lb <- crime_type_lb %>%
select(x2012, x2013, x2014, x2015, x2016, x2017, x2018, x2019, x2020, x2021, x2022, x2023) %>%
slice(as.numeric(46)) %>%
gather(year, total_crime) %>%
mutate(year = str_replace(year, "x", ""),
total_crime = as.numeric(total_crime))
total_crime_rate_lb <- v_crime_rate_lb %>%
right_join(updated_crime_type_lb, by = c("year")) %>%
select(year, population, total_crime) %>%
filter(year >= "2012" & year <= "2023") %>%
mutate(crimes_per_1000 = round((total_crime / population) * 1000, 1))
# To display the results:
total_crime_rate_lb %>%
arrange(desc(crimes_per_1000)) %>%
print()
# To create a graph:
total_crime_rate_lb %>%
ggplot(aes(x = year, y = crimes_per_1000, color = crimes_per_1000)) +
geom_point() +
geom_line(aes(group = 1)) +
scale_y_continuous(limits = c(0, 150)) +
scale_color_gradient(low = "#B0ABFF", high = "#0C27D0") +
labs(x = "Year", y = "Crime Rate",
title = "Lynchburg's Crime Rate per 1,000 people from 2012 to 2023", color = NULL)
View(updated_general_crime_lb)
knitr::opts_chunk$set(echo = TRUE)
library (tidyverse)
library (tidycensus)
library (rmarkdown)
library (janitor)
library (ggplot2)
library (ggthemes)
library (dplyr)
# Assuming these packages are already installed.
# Assuming base, datasets, forcats, graphics, tibble, purrr, readr, and stats are already installed and loaded.
knitr::opts_chunk$set(echo = TRUE)
library (tidyverse)
library (tidycensus)
library (rmarkdown)
library (janitor)
library (ggplot2)
library (ggthemes)
library (dplyr)
# Assuming these packages are already installed.
# Assuming base, datasets, forcats, graphics, tibble, purrr, readr, and stats are already installed and loaded.
crime_type_lb <- read_csv("data/crime_type_lynchburg.csv") %>%
clean_names() %>%
rename("crime_type" = x1)
general_crime_lb <- read_csv("data/general_crime_lynchburg.csv") %>%
clean_names() %>%
rename("crime_type" = x1)
arrests_lb <- read_csv("data/arrests_lynchburg.csv") %>%
clean_names()
police_assaults_lb <- read_csv("data/police_assault_lynchburg.csv") %>%
clean_names()
lb_pop <- read_csv("data/lynchburg_pop.csv") %>%
clean_names()
va_crime <- read_csv("data/crime_rates_va.csv") %>%
clean_names()
# To create a column with percent change from 2012 to 2023:
crime_type_lb <- crime_type_lb %>%
mutate(pct_change = round(((x2023 - x2012) / x2012) * 100, 1))
# To show the categories that have seen a decrease in crime:
crime_type_lb %>%
select(crime_type, x2012, x2023, pct_change) %>%
filter(pct_change < 0) %>%
arrange(pct_change) %>%
print()
# To show the categories that have seen an increase in crime:
crime_type_lb %>%
select(crime_type, x2012, x2023, pct_change) %>%
filter(pct_change > 0) %>%
arrange(desc(pct_change)) %>%
print()
# To format the data frame:
crime_type_lb <- crime_type_lb %>%
mutate(crime_type = str_sub(crime_type, 1, 10)) %>%
filter("crime type" != "Total")
# To create a graph for 2012's crime data:
crime_type_lb %>%
select(crime_type, x2012) %>%
ggplot(aes(x = crime_type, y = x2012, fill = x2012)) +
geom_bar(stat = "identity") +
scale_fill_gradient(low = "#B0ABFF", high = "#0C27D0") +
scale_y_continuous(limits = c(0, 1500)) +
labs(x = "Crime Type", y = "Number Reported",
title = "Crimes Committed in 2012", fill = NULL) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# To create a graph for 2023's crime data:
crime_type_lb %>%
select(crime_type, x2023) %>%
ggplot(aes(x = crime_type, y = x2023, fill = x2023)) +
geom_bar(stat = "identity") +
scale_fill_gradient(low = "#B0ABFF", high = "#0C27D0") +
scale_y_continuous(limits = c(0, 1500)) +
labs(x = "Crime Type", y = "Number Reported",
title = "Crimes Committed in 2023", fill = NULL) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# To adjust the general crime data frame:
updated_general_crime_lb <- general_crime_lb %>%
select(x2012, x2013, x2014, x2015, x2016, x2017, x2018, x2019, x2020, x2021, x2022, x2023) %>%
slice(1) %>%
gather(year, violent_crime) %>%
mutate(year = str_replace(year, "x", ""))
print(updated_general_crime_lb)
# To determine Lynchburg's violent crime rate and find the trend:
lb_pop <- lb_pop %>%
mutate(year = as.character(year))
v_crime_rate_lb <- updated_general_crime_lb %>%
right_join(lb_pop, by = c("year")) %>%
select(year, population, violent_crime) %>%
filter(year >= "2012" & year <= "2023") %>%
mutate(rate = round((violent_crime / population) * 100000, 1))
v_crime_rate_lb <- v_crime_rate_lb %>%
mutate(population = as.numeric(population))
# To display the results:
v_crime_rate_lb %>%
select(year, rate) %>%
print()
v_crime_dif_lb <- round(((v_crime_rate_lb$rate[12] - v_crime_rate_lb$rate[1]) / v_crime_rate_lb$rate[1]) * 100, 1)
cat("Percent change in Lynchburg's violent crime rate from 2012 to 2023:", v_crime_dif_lb, "%\n")
# To create a graph:
v_crime_rate_lb %>%
ggplot(aes(x = year, y = rate, color = rate)) +
geom_point() +
geom_line(aes(group = 1)) +
scale_y_continuous(limits = c(100, 600)) +
scale_color_gradient(low = "#B0ABFF", high = "#0C27D0") +
labs(x = "Year", y = "Violent Crime Rate",
title = "Lynchburg's Violent Crime Rate from 2012 to 2023", color = NULL)
# To store Lynchburg, Virginia, and the U.S.'s 2022 violent crime rates as values:
lb_crime_rate_22 <- round(v_crime_rate_lb$rate[11], 1)
va_crime_rate_22 <- round(va_crime$x2022[1], 1)
us_crime_rate_22 <- round(va_crime$x2022[2], 1)
# To store the differences as values:
lb_va_v_crime_dif <- round((((lb_crime_rate_22 - va_crime_rate_22) / va_crime_rate_22) * 100), 1)
lb_us_v_crime_dif <- round((((lb_crime_rate_22 - us_crime_rate_22) / us_crime_rate_22) * 100), 1)
# To display the results:
print(lb_va_v_crime_dif)
print(lb_us_v_crime_dif)
cat("Lynchburg's violent crime rate was", lb_va_v_crime_dif, "%", "higher than the state of Virginia's in 2022.", "\n")
cat("Lynchburg's violent crime rate was", lb_us_v_crime_dif, "%", "lower than that of the U.S. in 2022 (Lynchburg Police Department, World Population Review, F.B.I.).", "\n")
# To create a violent crime rate data frame:
crime_rates_22 <- data.frame(
place = c("Lynchburg", "Virginia", "United States"),
crime_rate = c(lb_crime_rate_22, va_crime_rate_22, us_crime_rate_22)
)
# To create a graph:
crime_rates_22 %>%
ggplot(aes(x = place, y = crime_rate)) +
geom_point(aes(color = crime_rate, size = crime_rate)) +
scale_y_continuous(limits = c(200, 400)) +
scale_color_gradient(low = "#B0ABFF", high = "#0C27D0") +
scale_size(range = c(6, 10)) +
labs(x = "Place", y = "Violent Crime Rate",
title = "2022 Violent Crime Rates Compared", color = NULL) +
guides(size = FALSE)
# To refresh the data:
crime_type_lb <- read_csv("data/crime_type_lynchburg.csv") %>%
clean_names() %>%
rename("crime_type" = x1)
# To add a Total row to the Lynchburg crime type data frame:
total_row <- colSums(crime_type_lb[, -1], na.rm = TRUE)
total_row <- as.numeric(total_row)
crime_type_lb <- rbind(crime_type_lb, c("Total", total_row))
# To find the total crime rate per 1,000 people:
updated_crime_type_lb <- crime_type_lb %>%
select(x2012, x2013, x2014, x2015, x2016, x2017, x2018, x2019, x2020, x2021, x2022, x2023) %>%
slice(as.numeric(46)) %>%
gather(year, total_crime) %>%
mutate(year = str_replace(year, "x", ""),
total_crime = as.numeric(total_crime))
total_crime_rate_lb <- v_crime_rate_lb %>%
right_join(updated_crime_type_lb, by = c("year")) %>%
select(year, population, total_crime) %>%
filter(year >= "2012" & year <= "2023") %>%
mutate(crimes_per_1000 = round((total_crime / population) * 1000, 1))
# To display the results:
total_crime_rate_lb %>%
arrange(desc(crimes_per_1000)) %>%
print()
# To create a graph:
total_crime_rate_lb %>%
ggplot(aes(x = year, y = crimes_per_1000, color = crimes_per_1000)) +
geom_point() +
geom_line(aes(group = 1)) +
scale_y_continuous(limits = c(0, 150)) +
scale_color_gradient(low = "#B0ABFF", high = "#0C27D0") +
labs(x = "Year", y = "Crime Rate",
title = "Lynchburg's Crime Rate per 1,000 people from 2012 to 2023", color = NULL)
# To refresh the data:
crime_type_lb <- read_csv("data/crime_type_lynchburg.csv") %>%
clean_names() %>%
rename("crime_type" = x1)
# To add a Total column to the Lynchburg crime type data frame:
total_row <- rowSums(crime_type_lb[, -1], na.rm = TRUE)
crime_type_lb$Total <- total_row
# To display the results:
crime_type_lb %>%
select(crime_type, Total) %>%
arrange(desc(Total)) %>%
print()
# To format the data frame:
updated_general_crime_lb <- general_crime_lb %>%
gather(key = "year", value = "count", -crime_type) %>%
mutate(year = str_replace(year, "x", "")) %>%
spread(key = "crime_type", value = "count") %>%
clean_names()
# To create a graph:
updated_general_crime_lb %>%
select(year, violent_crime, property_crime) %>%
pivot_longer(cols = c(violent_crime, property_crime), names_to = "crime_type", values_to = "Total") %>%
ggplot(aes(x = year, y = Total, fill = crime_type)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
scale_fill_manual(values = c("#B0ABFF", "#0C27D0"), labels = c("Property Crime", "Violent Crime")) +
scale_y_continuous(limits = c(0, 2500)) +
labs(x = "Year", y = "Number Reported",
title = "Crime Totals from 2012 to 2023", fill = NULL) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
knitr::opts_chunk$set(echo = TRUE)
library (tidyverse)
library (tidycensus)
library (rmarkdown)
library (janitor)
library (ggplot2)
library (ggthemes)
library (dplyr)
# Assuming these packages are already installed.
# Assuming base, datasets, forcats, graphics, tibble, purrr, readr, and stats are already installed and loaded.
crime_type_lb <- read_csv("data/crime_type_lynchburg.csv") %>%
clean_names() %>%
rename("crime_type" = x1)
general_crime_lb <- read_csv("data/general_crime_lynchburg.csv") %>%
clean_names() %>%
rename("crime_type" = x1)
arrests_lb <- read_csv("data/arrests_lynchburg.csv") %>%
clean_names()
police_assaults_lb <- read_csv("data/police_assault_lynchburg.csv") %>%
clean_names()
lb_pop <- read_csv("data/lynchburg_pop.csv") %>%
clean_names()
va_crime <- read_csv("data/crime_rates_va.csv") %>%
clean_names()
# To create a column with percent change from 2012 to 2023:
crime_type_lb <- crime_type_lb %>%
mutate(pct_change = round(((x2023 - x2012) / x2012) * 100, 1))
# To show the categories that have seen a decrease in crime:
crime_type_lb %>%
select(crime_type, x2012, x2023, pct_change) %>%
filter(pct_change < 0) %>%
arrange(pct_change) %>%
print()
# To show the categories that have seen an increase in crime:
crime_type_lb %>%
select(crime_type, x2012, x2023, pct_change) %>%
filter(pct_change > 0) %>%
arrange(desc(pct_change)) %>%
print()
# To format the data frame:
crime_type_lb <- crime_type_lb %>%
mutate(crime_type = str_sub(crime_type, 1, 10)) %>%
filter("crime type" != "Total")
# To create a graph for 2012's crime data:
crime_type_lb %>%
select(crime_type, x2012) %>%
ggplot(aes(x = crime_type, y = x2012, fill = x2012)) +
geom_bar(stat = "identity") +
scale_fill_gradient(low = "#B0ABFF", high = "#0C27D0") +
scale_y_continuous(limits = c(0, 1500)) +
labs(x = "Crime Type", y = "Number Reported",
title = "Crimes Committed in 2012", fill = NULL) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# To create a graph for 2023's crime data:
crime_type_lb %>%
select(crime_type, x2023) %>%
ggplot(aes(x = crime_type, y = x2023, fill = x2023)) +
geom_bar(stat = "identity") +
scale_fill_gradient(low = "#B0ABFF", high = "#0C27D0") +
scale_y_continuous(limits = c(0, 1500)) +
labs(x = "Crime Type", y = "Number Reported",
title = "Crimes Committed in 2023", fill = NULL) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# To adjust the general crime data frame:
updated_general_crime_lb <- general_crime_lb %>%
select(x2012, x2013, x2014, x2015, x2016, x2017, x2018, x2019, x2020, x2021, x2022, x2023) %>%
slice(1) %>%
gather(year, violent_crime) %>%
mutate(year = str_replace(year, "x", ""))
print(updated_general_crime_lb)
# To determine Lynchburg's violent crime rate and find the trend:
lb_pop <- lb_pop %>%
mutate(year = as.character(year))
v_crime_rate_lb <- updated_general_crime_lb %>%
right_join(lb_pop, by = c("year")) %>%
select(year, population, violent_crime) %>%
filter(year >= "2012" & year <= "2023") %>%
mutate(rate = round((violent_crime / population) * 100000, 1))
v_crime_rate_lb <- v_crime_rate_lb %>%
mutate(population = as.numeric(population))
# To display the results:
v_crime_rate_lb %>%
select(year, rate) %>%
print()
v_crime_dif_lb <- round(((v_crime_rate_lb$rate[12] - v_crime_rate_lb$rate[1]) / v_crime_rate_lb$rate[1]) * 100, 1)
cat("Percent change in Lynchburg's violent crime rate from 2012 to 2023:", v_crime_dif_lb, "%\n")
# To create a graph:
v_crime_rate_lb %>%
ggplot(aes(x = year, y = rate, color = rate)) +
geom_point() +
geom_line(aes(group = 1)) +
scale_y_continuous(limits = c(100, 600)) +
scale_color_gradient(low = "#B0ABFF", high = "#0C27D0") +
labs(x = "Year", y = "Violent Crime Rate",
title = "Lynchburg's Violent Crime Rate from 2012 to 2023", color = NULL)
# To store Lynchburg, Virginia, and the U.S.'s 2022 violent crime rates as values:
lb_crime_rate_22 <- round(v_crime_rate_lb$rate[11], 1)
va_crime_rate_22 <- round(va_crime$x2022[1], 1)
us_crime_rate_22 <- round(va_crime$x2022[2], 1)
# To store the differences as values:
lb_va_v_crime_dif <- round((((lb_crime_rate_22 - va_crime_rate_22) / va_crime_rate_22) * 100), 1)
lb_us_v_crime_dif <- round((((lb_crime_rate_22 - us_crime_rate_22) / us_crime_rate_22) * 100), 1)
# To display the results:
print(lb_va_v_crime_dif)
print(lb_us_v_crime_dif)
cat("Lynchburg's violent crime rate was", lb_va_v_crime_dif, "%", "higher than the state of Virginia's in 2022.", "\n")
cat("Lynchburg's violent crime rate was", lb_us_v_crime_dif, "%", "lower than that of the U.S. in 2022 (Lynchburg Police Department, World Population Review, F.B.I.).", "\n")
# To create a violent crime rate data frame:
crime_rates_22 <- data.frame(
place = c("Lynchburg", "Virginia", "United States"),
crime_rate = c(lb_crime_rate_22, va_crime_rate_22, us_crime_rate_22)
)
# To create a graph:
crime_rates_22 %>%
ggplot(aes(x = place, y = crime_rate)) +
geom_point(aes(color = crime_rate, size = crime_rate)) +
scale_y_continuous(limits = c(200, 400)) +
scale_color_gradient(low = "#B0ABFF", high = "#0C27D0") +
scale_size(range = c(6, 10)) +
labs(x = "Place", y = "Violent Crime Rate",
title = "2022 Violent Crime Rates Compared", color = NULL) +
guides(size = FALSE)
# To refresh the data:
crime_type_lb <- read_csv("data/crime_type_lynchburg.csv") %>%
clean_names() %>%
rename("crime_type" = x1)
# To add a Total row to the Lynchburg crime type data frame:
total_row <- colSums(crime_type_lb[, -1], na.rm = TRUE)
total_row <- as.numeric(total_row)
crime_type_lb <- rbind(crime_type_lb, c("Total", total_row))
# To find the total crime rate per 1,000 people:
updated_crime_type_lb <- crime_type_lb %>%
select(x2012, x2013, x2014, x2015, x2016, x2017, x2018, x2019, x2020, x2021, x2022, x2023) %>%
slice(as.numeric(46)) %>%
gather(year, total_crime) %>%
mutate(year = str_replace(year, "x", ""),
total_crime = as.numeric(total_crime))
total_crime_rate_lb <- v_crime_rate_lb %>%
right_join(updated_crime_type_lb, by = c("year")) %>%
select(year, population, total_crime) %>%
filter(year >= "2012" & year <= "2023") %>%
mutate(crimes_per_1000 = round((total_crime / population) * 1000, 1))
# To display the results:
total_crime_rate_lb %>%
arrange(desc(crimes_per_1000)) %>%
print()
# To create a graph:
total_crime_rate_lb %>%
ggplot(aes(x = year, y = crimes_per_1000, color = crimes_per_1000)) +
geom_point() +
geom_line(aes(group = 1)) +
scale_y_continuous(limits = c(0, 150)) +
scale_color_gradient(low = "#B0ABFF", high = "#0C27D0") +
labs(x = "Year", y = "Crime Rate",
title = "Lynchburg's Crime Rate per 1,000 people from 2012 to 2023", color = NULL)
# To refresh the data:
crime_type_lb <- read_csv("data/crime_type_lynchburg.csv") %>%
clean_names() %>%
rename("crime_type" = x1)
# To add a Total column to the Lynchburg crime type data frame:
total_row <- rowSums(crime_type_lb[, -1], na.rm = TRUE)
crime_type_lb$Total <- total_row
# To display the results:
crime_type_lb %>%
select(crime_type, Total) %>%
arrange(desc(Total)) %>%
print()
# To format the data frame:
updated_general_crime_lb <- general_crime_lb %>%
gather(key = "year", value = "count", -crime_type) %>%
mutate(year = str_replace(year, "x", "")) %>%
spread(key = "crime_type", value = "count") %>%
clean_names()
# To create a graph:
updated_general_crime_lb %>%
select(year, violent_crime, property_crime) %>%
pivot_longer(cols = c(violent_crime, property_crime), names_to = "crime_type", values_to = "Total") %>%
ggplot(aes(x = year, y = Total, fill = crime_type)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8)) +
scale_fill_manual(values = c("#B0ABFF", "#0C27D0"), labels = c("Property Crime", "Violent Crime")) +
scale_y_continuous(limits = c(0, 2500)) +
labs(x = "Year", y = "Number Reported",
title = "Crime Totals from 2012 to 2023", fill = NULL) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
